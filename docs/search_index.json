{
  "docs": [
    {
      "location": "ADO.htm",
      "breadcrumbs": "Home / ORMs / ADO.NET",
      "keywords": "a abstract access Ado ADO All allowing allows also and api are area as automatically be beyond blob Bug bugs capabilities classes com Common connection Connection connectionstrings connectivity consistent Core creating cs data Data database databases Databases DB Db2 DB2 Devart differently docs documentation Documentation done dotnet drivers en experience Firebird FirebirdClient FirebirdSql for For foundational Framework generic github greater have https IBM idatareader IDataReader idbcommand IDbCommand idbconnection IDbConnection implement implements important in includes incorporated Individual information interfaces into is issues itself just known labels libraries Libraries library License LICENSE licensed Licensing logged maintainers master may microsoft Microsoft MIT most Most MySQL MySqlConnector need needed NET No Npgsql nuget ODBC of Of offer offered often OleDB on OpenConnection OpenEdge or Oracle org own package packages PostgreSQL Primary Progress provider providers Recipes Reference reported Reporting repository requires respective runtime ScenarioBase Server set setup Setup should snippet special specific SQL SqlClient SQLite string strings Strings supported Supported system System than that the The their these This to try Tutorials TXT under us using via well which writing www you",
      "title": "ADO.NET"
    },
    {
      "location": "Chain.htm",
      "breadcrumbs": "Home / ORMs / Chain",
      "keywords": "a Access ADO also an and any around based be between blob Bug but cached can capabilities Chain classes com concept connection connections connectionString Core created Data database Database Databases DataSource docevaad Documentation files for Framework Full generates generation github handles htm https in internally interrogates intersection Introduction io is issues Issues it its Libraries License Licensing logged mapping Mapping master MDS Microsoft MIT MySql MySQL NET new Normally nuget object Odbc of offered offers often OleDb OleDB one only Only org Other packages per PostgreSql PostgreSQL Primary PrimaryDataSource provider Quick Rather reflection Reflection Reporting repository requires Result safe schema Server set Setup should so specific SQL SqlClient SQLite SqlServer SqlServerDataSource Start string support Support Supported supports System tables than that the Then thread Tortuga Tutorials txt under using Using which without writing www",
      "title": "Chain"
    },
    {
      "location": "Dapper.htm",
      "breadcrumbs": "Home / ORMs / Dapper",
      "keywords": "0 2 a additional ADO an and any apache Apache as be Bug com Dapper database Database Databases describes Documentation does earilest exposed extension for generation github handle htm http https IDbConnection in is issues Issues it It itself keeping libraries Libraries License LICENSE licenses Licensing logged mapper mapping methods Micro Net NET No not nuget object objects of offered offers often one org ORMs over packages parameters primary provide provider Provider purpose Quick Reporting repository required requires result same set sets setup Setup should simple specific Specific SQL StackExchange Start style Supported supports that the to Tutorials uess under version which with writing www",
      "title": "Dapper"
    },
    {
      "location": "EF6.htm",
      "breadcrumbs": "Home / ORMs / Entity Framework 6",
      "keywords": "6 a and are Bug bugs databases Databases Documentation Entity etc for Framework information learning Libraries License Licensing Links List needed NuGet of ORM overview Overview packages project Quick reported Reporting resource setting Setup supported Supported the to TODO TOOD tools Tutorials up Where Which",
      "title": "Entity Framework 6"
    },
    {
      "location": "EFCore.htm",
      "breadcrumbs": "Home / ORMs / Entity Framework Core",
      "keywords": "0 2 3 a access All Alternately and Apache are as assumes automatically Azure be between blob Bug can changes class classes cli com command compatible configuration connections contains core Core Cosmos created creating cross current data database Database Databases DB dbcontext DbContext DBContext describes differently docs Documentation dotnet ef EF efcore en entities entity Entity extensible first for Framework generate get github https in Individual internally is issues Issues itself Libraries License LICENSE licensed Licensing lightweight list logged manages map mapping MariaDB master matching may microsoft miscellaneous MySQL needed netcore not of offered one open Oracle performed platform popular PostgreSQL powershell Primary providers Providers Reporting repository required requires scaffold Scaffold schema See Server Setup should source specific SQL SQLite started subclass Supported supports tables tabs technology the The This to tracks Tutorial Tutorials txt under us used version via which with x",
      "title": "Entity Framework Core"
    },
    {
      "location": "LLBLGenPro.htm",
      "breadcrumbs": "Home / ORMs / LLBLGen Pro",
      "keywords": "0 1 2 2000 2003 20Framework 20Pro 20Reference 20RTF 20Sql 20to 4 5 6 7 9i a access Access added additional Additionally alert all All also among analyzer and answer API are as aspx assemblies available AvailableDerivedModelFrameworks Azure batching be besides Besides both bug Bug builds buy caching can CE Cloud code com comes commercial compatible complete Core Cosmos data database databases Databases day DB DB2 DBs define derived Derived designer Designer Desktop details development different disconnected document Document documentation Documentation don done DQE DTOs e eager end entities entity Entity EULA Every everything expire expires express Express feature features field Firebird first fixes fluent following for forever form forums framework Framework free from full Functionality g Generated generator get getting_started Google has have higher hotfix htm https IBM if in In info install installed installer interfaces into is it It its Its itself Libraries license licensees Licensing like Linq llblgen LLBLGen loading locally main MariaDB means merged micro Microsoft mix model Model modeling models modern MongoDB more MS much multi multiple MySql MySQL need NET netstandard NHibernate nuget NuGet occasions of offers often on one or Oracle OracleMS OracleODPNET org ORM ORMs ORMSupportClasses outperforming output own packages Pages parts performance perpetual pick plain please PostgreSql PostgreSQL Pro profiler Profiler projections pull queries query questions Quickstart Quickstartguides RavenDB released Reporting reports repository require resultset rich royalty runtime Runtime SD see See Server set Setup several site solution Spanner Sql SQL SqlServer started subscription support Support Supported supports system systems team text the The their them These They this through tinyforum to To top Tutorials two Unit up use used uses using usually v7 valid variants vast version via videos Videos visual was Web website where which with within won work www x you your",
      "title": "LLBLGen Pro"
    },
    {
      "location": "NHibernate.htm",
      "breadcrumbs": "Home / ORMs / NHibernate",
      "keywords": "a and are Bug bugs databases Databases Documentation etc for information learning Libraries License Licensing Links List needed NHibernate NuGet of ORM overview Overview packages project Quick reported Reporting resource setting Setup supported Supported the to TODO TOOD tools Tutorials up Where Which",
      "title": "NHibernate"
    },
    {
      "location": "RepoDb.htm",
      "breadcrumbs": "Home / ORMs / RepoDb",
      "keywords": "a and are Bug bugs databases Databases Documentation etc for information learning Libraries License Licensing Links List needed NuGet of ORM overview Overview packages project Quick RepoDb reported Reporting resource setting Setup supported Supported the to TODO TOOD tools Tutorials up Where Which",
      "title": "RepoDb"
    },
    {
      "location": "ServiceStack.htm",
      "breadcrumbs": "Home / ORMs / ServiceStack",
      "keywords": "a and are Bug bugs databases Databases Documentation etc for information learning Libraries License Licensing Links List needed NuGet of ORM overview Overview packages project Quick reported Reporting resource ServiceStack setting Setup supported Supported the to TODO TOOD tools Tutorials up Where Which",
      "title": "ServiceStack"
    },
    {
      "location": "FAQ.htm",
      "breadcrumbs": "Home / FAQ",
      "keywords": "2nd a abide abstract access accomplished achieve add all All allowed an and Another any application Application Architecture are around as Asked assists associated based basic be both business by Can cases close concerns connection connections Connections consider Consumers context conventions cookbook Core create Creating currently custom data database databases DBContext design designing details developer development dictate different Different do doesn don early Edition EmployeeClassification Encapsulate entities example excessive exist expose favorite following for For Frequently fulfill function functionality fundamental general Generally generating goals Guide guidelines have headers hide hold how I if If in In inject intention interact interface interfaces internal IQueryable is ISession It knowledge late layer long maintenance managed managing mapping maximize may mean Microsoft my NET Never no not null objects of once open or order ORM ORMs other our part passed performance periods permitted phase planning possible project queries Questions reason record repositories requirement resources responsible returns scenario scenarios security Separating Server should so solutions something source sources speaking specific SQL structures such support t tasked techniques technologies test that the The them this This through to To TypedDataSets uses using valuable want wants way we What when Why will willing with within XML Yes you",
      "title": "FAQ"
    },
    {
      "location": "SingleModelCrud.htm",
      "breadcrumbs": "Home / Single Model CRUD",
      "keywords": "1 15 2003 2019 30 6 a A abstract Action actually Adapter Ado ADO adornment alert all All also amount an and annotations API applies are as As aspx associate at attribute attributes base Based basic be before below better block boilerplate both Build but by call called calling calls can cannot cases Chain class code Code column Column commercial complex configuration ConfigureSessionFactory context convenient cookbook core Core could covers create Create created CRUD cs csharp Dapper database date DB DbContext DbSet delete Delete Depending derive design designer development does doesn done each EDMX ef efcore either eliminates Embedded EmployeeClassification EmployeeClassificationKey EmployeeClassificationName EmployeeClassifications end entities Entities entity Entity EntityFramework EntityFrameworkCore entityframeworktutorial error essentially every example existing extra extraneous far file files Finally first First fluent Flush for For Framework from full further general generate generated get has have hbm heavily helper Here Hibernate how However HR https hybrid illustrate implementations implicitly Improved in In includes info information Instead int interesting interfaces internally invoke is ISingleModelCrudScenario it It its itself Java just key Key keys latest leaving less level like Linq LINQ LinqToDB literally ll LLBLGen LLBLGenPro long looks low major mapping mappings Mappings market match mean means metadata methods micro minimal mix model Model models Models modifications more multiple name names need needed needs net NET NHibernate no non normally not October of offers often oldest on one operation operations or ORM OrmCookbook ORMs other Other over overridden paradigms partial participate per performing plain poco primary Pro property Prototype public query QuerySpec Rather raw read Read really recipes Recipes recommended reduce refers released releases relies RepoDb repositories repository represents requires resembles resemebles resource revised row rule rules runtime s same scenario Scenario see seen SelfServicing ServiceStack SessionFactory set setup Setup shown since single Single SingleModelCrud SingleModelCrudScenario SingleModelCrudScenario2 snippet so some speaking specific specified SQL SQLs standard stitch Strictly string StringLength strings style such supports systems t table Table tag TEmployeeClassification that the The there There these These they this This to To together tooling Tortuga two update Update usage use used using v5 various version virtual was well what when When which will with With Without written www xml XML you",
      "title": "Single Model CRUD"
    },
    {
      "location": "ModelWithChildren.htm",
      "breadcrumbs": "Home / Model with Children CRUD",
      "keywords": "1 2 6 a access active ADO agnostic all alone alt Alternately Alternative an and application are aren around as at available based be between block by By can cascade Cascade cascading Chain child Child class clean collection constraint control Core correctly Create CRUD cs Dapper data database DB DBContext default delete Delete DeleteBehavior deleted deletes demonstrates desired direct does due each easy empty ensure entities Entity EntityFrameworkCore EntityState even explicitly find for For foreign Framework functionality go have ignore IModelWithChildrenScenario implemented in includes insert Interfaces IProduct IProductLine is ISession isn it key layer lazy level LINQ list LLBLGen LLBLGenPro loading longer management method missing Model ModelWithChildren ModelWithChildrenScenario ModelWithChildrenScenarioAlt needed Nested NET NHibernate no not object objects of on OnDelete one operating operation operations Operations or order ORM orphan Otherwise parent partial pass performing predicate Pro property Prototype Read Recipes record records Records regular removal removed RepoDb repository requires rest rows scenario Scenario separate separately separation ServiceStack set setting setup snippet stand straightforward support supported table that the The this This to TODO Tortuga TProduct TProductLine tracker tracks transaction trigger two Unit up update Update using utilize utilizing variants way we when When whether which will with With work Work works you",
      "title": "Model with Children CRUD"
    },
    {
      "location": "SingleModelCrudAsync.htm",
      "breadcrumbs": "Home / Async Operations",
      "keywords": "1 6 a add adds Ado ADO an and another any appropriate are arrays As async Async asynchronous attempt await be becomes between but But can cancel cancellable cancellation Chain changes CommandDefinition completing condition ConfigureAwait Core create CRUD cs Dapper Data database DB done Entity EntityFramework EntityFrameworkCore example exceptions explicitly exposes extension false for For Framework full future general GetByKey GetByKeyAsync handled Here htm if If import in including is ISingleModelCrudAsyncScenario it LINQ LinqToDB LLBLGen LLBLGenPro loading make may methods Model must namespace need needed NET NHibernate non not object of only open operation operations or Original Otherwise parameter parameters places Pro Prototype provided query race read reason Recipes record records RepoDb repository required rule safely scenario Scenario scenarios ServiceStack set Single SingleModelCrud SingleModelCrudAsync SingleModelCrudAsyncScenario SingleModelCrudScenario snippet support System TEmployeeClassification that the The then There they think this This to To token tokens Tortuga transactions try user users version which will wish with With wrap write you your",
      "title": "Async Operations"
    },
    {
      "location": "TryCrud.htm",
      "breadcrumbs": "Home / TryGet/Update/Delete Operations",
      "keywords": "1 6 a Ado ADO an and as back between cases catch Chain command Core counts cs Dapper DB Delete demonstrate difference Entity EntityFramework EntityFrameworkCore exception Execute ExecuteNonQuery fail Framework from In is ITryCrudScenario Like LINQ LinqToDB LLBLGen LLBLGenPro methods need NET NHibernate no operations Operations or Pro Prototype read Recipes RepoDb returned row Scenario scenarios ServiceStack silently snippet some StaleStateException TEmployeeClassification that the The there These this to Tortuga trick TryCrud TryCrudScenario TryDelete TryGet TryUpdate Update uses with you",
      "title": "TryGet/Update/Delete Operations"
    },
    {
      "location": "Upsert.htm",
      "breadcrumbs": "Home / Upsert",
      "keywords": "1 6 a Ado ADO an atomic be Chain code Core cs Dapper DB demonstrate demonstrates directly doesn EF Entity EntityFramework EntityFrameworkCore Framework how in insert IUpsertScenario LINQ LinqToDB LLBLGen LLBLGenPro MERGE must NET NHibernate often perform performed possible Pro proceed Prototype read Recipes RepoDb Scenario scenarios ServiceStack should single snippet so statement support syntax TDivision the These this This to Tortuga update upsert Upsert UpsertScenario Where",
      "title": "Upsert"
    },
    {
      "location": "PartialUpdate.htm",
      "breadcrumbs": "Home / Partial Updates",
      "keywords": "1 2 6 a above Ado ADO and are be below can Chain class ClassMappedNameCache Code column columns Core cs Dapper DB decide demonstrate directly do dynamic e either entity Entity EntityFramework EntityFrameworkCore extract fetch fetching filter first following for Framework from g have help how in In IPartialUpdateScenario it item key Limit LINQ LinqToDB LLBLGen LLBLGenPro model modify name NET NHibernate object of on one or original parameter partial Partial PartialUpdate PartialUpdateScenario pass passed perform primary Pro properties Prototype Recipes record RepoDb resembles row s Scenario scenarios separate ServiceStack snippet snippets Specify table targe target targetted the The then These to To Tortuga unpacked update Updated updates Updates UpdateWithObject UpdateWithSeparateParameters will without you your",
      "title": "Partial Updates"
    },
    {
      "location": "Immutable.htm",
      "breadcrumbs": "Home / Immutable CRUD",
      "keywords": "1 6 a action ADO after an An and are as be before being Below between but by call can Chain changes class client constructor Constructor conversion conversions cookbook Core Create CRUD cs Dapper data DB default Delete deleted demonstrate directly does doesn e either EmployeeClassification EmployeeClassificationEntity entities entity Entity EntityFramework EntityFrameworkCore fetched focus for Framework g handling have how however IImmutableScenario immutable Immutable ImmutableScenario in indicate individual InferConstructor inserted instead interact Interfaces IReadOnlyEmployeeClassification is it link LINQ LinqToDB LLBLGen LLBLGenPro make manage mapped marked materialized memory models Models mutable natively need needed NET NHibernate no No non not object objects Objects of on only operations Operations option or order other overcome pair perform populate Pro properties Prototype read Read ReadOnlyEmployeeClassification recipes Recipes RepoDb repository sample Scenario scenarios scope ServiceStack setting should side Since snippet special specifications support supports than that the The these These this to To ToEntity Tortuga TReadOnlyModel type Update updated use used using with WithConstructor work working write You",
      "title": "Immutable CRUD"
    },
    {
      "location": "MultipleCrud.htm",
      "breadcrumbs": "Home / CRUD Operations on Multiple Objects",
      "keywords": "1 100 6 a ADO and be Chain collection Core Create CRUD cs Dapper DB Delete demonstrate Entity EntityFramework EntityFrameworkCore Framework how If IMultipleCrudScenario it LINQ LLBLGen LLBLGenPro Multiple MultipleCrud MultipleCrudScenario NET NHibernate objects Objects of on operation operations Operations ORM perform performed Pro Prototype Read Recipes RepoDb Scenario scenarios ServiceStack should single snippet SQL statement supports TEmployeeSimple the These to TODO Tortuga Update with",
      "title": "CRUD Operations on Multiple Objects"
    },
    {
      "location": "LargeBatch.htm",
      "breadcrumbs": "Home / Batch Inserts with Large Collections",
      "keywords": "000 1 10 100 2100 6 a adjust ADO after and approximately are articles as atomic batch Batch BatchAsLists batches be better breaking broken Bulk BulkCopyType BulkInsert BulkInsertScenario but can Chain changes collection collections Collections columns command consider Copy Core counts CRUD cs Dapper database DB DBContext degration demonstrate doesn effect Entity EntityFramework EntityFrameworkCore every features for For Framework from function github handling how htm html https ILargeBatchScenario in increases information insert Insert InsertBatch InsertMultipleBatch inserts Inserts instead into io is it Large LargeBatch LargeBatchScenario limit LINQ linq2db LinqToDB LLBLGen LLBLGenPro many maximum mitigate more Multiple MultipleRows necessary need needed NET new NHibernate No not Note number objects Objects of offer on only operations Operations ORMs other overcomes parameter perform performance Pro Prototype provided Recipes RepoDb require scenario Scenario see Server ServiceStack severe should size snippet Some special sql SQL Start suffer supports T TEmployeeSimple that the The this This to To Tortuga tracks transaction up use used using Utilities with",
      "title": "Batch Inserts with Large Collections"
    },
    {
      "location": "BulkInsert.htm",
      "breadcrumbs": "Home / Bulk Inserts",
      "keywords": "000 1 100 6 a ADO and APIs appropriate articles batch Batch be bulk Bulk BulkCopyType BulkInsert BulkInsertScenario Chain collection collections Collections Copy CopyToDataTable Core CRUD cs Dapper database DataTable DB demonstrate described do does Entity for For Framework from function github handled handling have how htm html https IBulkInsertScenario improve in In information insert Insert inserts Inserts io is isn large Large LargeBatch LINQ linq2db LinqToDB LLBLGen mapping more Multiple MultipleCrud NET NHibernate not Note objects Objects of on only operations Operations order ORMs Others pattern perform performance Pro Prototype provided ProviderSpecific rather Recipes RepoDb require same scenario Scenario see seen ServiceStack should size Smaller snippet Some special specific sql SQL support supports TEmployeeSimple than that the this This to TODO Tortuga use used uses Utilities where with",
      "title": "Bulk Inserts"
    },
    {
      "location": "Joins.htm",
      "breadcrumbs": "Home / Projecting with a Join",
      "keywords": "2 6 a achieve Additionally Ado ADO an and API as Based be been but by called Chain Child Core created CRUD cs Dapper database DB default define demonstrate design does doesn EF EmployeeDetail EmployeeJoined entity Entity EntityFramework EntityFrameworkCore examples explicitly fallback for For Foreign Framework graph has have hbm Here how htm IJoinsScenario implicit in In into is It join Join joins Joins JoinsScenario JoinsScenarioTypedList Key linq LINQ LinqToDB List Lists LLBLGen LLBLGenPro mapped Mappings may Model ModelWithChildren ModelWithLookupComplex multiple Multiple native natively need NET NHibernate normal not object Object objects of on one Operations or other over performing plain Pro project Projecting projection projections projects Prototype purpose queries raw Recipes Records RepoDb repository reults right same Scenario scenarios See ServiceStack simple snippet so SQL SQLs support supports TEmployeeDetail TEmployeeSimple the these These this time to Tortuga Typed used view which with xml you",
      "title": "Projecting with a Join"
    },
    {
      "location": "Views.htm",
      "breadcrumbs": "Home / Reading from Views",
      "keywords": "0 2 3 6 a able additional Ado ADO also Alternatively and are aren as be but by capability Chain column configuration configured Core could cs Dapper Database databases DB demonstrate designer EF EmployeeDetail entities entity Entity EntityFramework EntityFrameworkCore false Framework from HasNoKey have hbm how however HR ID in In is IViewsScenario like LINQ LinqToDB LLBLGen LLBLGenPro mapped Mappings marked modelBuilder must mutable name NET NHibernate Note of OrmCookbookDB outside participate POCOs Pro Prototype read Reading readonly Recipes regular relationships RepoDb require requirements scenario Scenario scenarios schema scope ServiceStack snippet some sql Starting supported tables TEmployeeDetail TEmployeeSimple text that the The them these These They this to Tortuga ToView treated two Typed unique view View views Views ViewsScenario we While with writing xml",
      "title": "Reading from Views"
    },
    {
      "location": "ScalarValue.htm",
      "breadcrumbs": "Home / Reading a Salar Value from a Row",
      "keywords": "6 a Ado ADO an Basic BasicStoredProc Chain column Core count Counts cs Dapper DB demonstrate discarded else Entity EntityFramework EntityFrameworkCore Everything example ExecuteScalar field first For Framework from how htm in In is IScalarValueScenario LINQ LinqToDB LLBLGen LLBLGenPro NET NHibernate of Pro procedure Procedures Prototype read reading Reading Recipes RepoDb resultset returns row Row RowCount scalar Scalar ScalarValue ScalarValueScenario Scenario scenarios see ServiceStack simple single snippet stored Stored the These to TODO Tortuga value Value values",
      "title": "Reading a Salar Value from a Row"
    },
    {
      "location": "RowCount.htm",
      "breadcrumbs": "Home / Row Counts",
      "keywords": "1 6 a Ado ADO Chain column Core count Counts cs Dapper DB demonstrate discarded else Entity EntityFramework EntityFrameworkCore Everything ExecuteScalar first Framework from get how in In IRowCountScenario is LINQ LinqToDB LLBLGen LLBLGenPro NET NHibernate of Pro Prototype Recipes RepoDb resultset returns row Row RowCount RowCountScenario Scenario scenarios ServiceStack snippet table TEmployeeSimple the These to Tortuga",
      "title": "Row Counts"
    },
    {
      "location": "Sorting.htm",
      "breadcrumbs": "Home / Basic Sorting",
      "keywords": "1 6 a A Ado ADO against are as at attacks basic Basic be but by Chain checked chosed columns Columns Core cs Dapper DB demonstrate dynamically Entity EntityFramework EntityFrameworkCore expressions for Framework handled how in injection is ISortingScenario LINQ LinqToDB list LLBLGen LLBLGenPro needed NET NHibernate Note object of or passed perform prevent Pro Prototype Recipes RepoDb reverse runtime Scenario scenarios separate ServiceStack snippet sorted SortExpression sorting Sorting SortingScenario sorts SQL strings TEmployee the These to Tortuga will",
      "title": "Basic Sorting"
    },
    {
      "location": "Pagination.htm",
      "breadcrumbs": "Home / Paging Results",
      "keywords": "1 6 a Ado ADO an and are available be can Chain com Core cs Dapper DB demonstrate determine e Entity EntityFramework EntityFrameworkCore faster for For Framework how https i If index information IPaginationScenario is keyset Keyset LINQ LinqToDB LLBLGen LLBLGenPro luke more need NET next NHibernate no of offset page Page pagination Pagination PaginationScenario Paging Past point previous Pro Prototype Recipes RepoDb result results Results resutls Scenario scenarios see ServiceStack set shown significantly Size Skip snippet starting styles support Take technique TEmployeeSimple than the These this Three to tool Tortuga use used using We where",
      "title": "Paging Results"
    },
    {
      "location": "PopulateDataTable.htm",
      "breadcrumbs": "Home / Populate DataTable",
      "keywords": "6 a A add Ado ADO also an are area as be before bulk but can Chain chosen classes columns consider Core creating cs custom Dapper data DataTable DataTableResultTransformer DB displayed does dynamically each EF Entity EntityFramework EntityFrameworkCore ExecuteReader for Framework from generalize grid holding IDataReader in In inconjunction inline insert IPopulateDataTableScenario IResultTransformer is it It library LINQ LLBLGen LLBLGenPro Load may method must natively NET NHibernate not Note object of often onerous operation or performing Populate PopulateDataTable PopulateDataTableScenario PopulateDataTableScenario2 primarily Pro Prototype provided Recipes reflection RepoDb report results returned Scenario ServiceStack snippet some sort SQL staging support supports that the then this to TODO Tortuga used using when with you You",
      "title": "Populate DataTable"
    },
    {
      "location": "ModelWithLookupSimple.htm",
      "breadcrumbs": "Home / Foreign Key to Lookup Table CRUD / Integer-Based Foreign Key",
      "keywords": "1 6 a Ado ADO an and as Based been Chain code constructor Core Create CRUD cs Dapper DB Delete demonstrates EmployeeSimple Entity EntityFramework EntityFrameworkCore FK foreign Foreign Framework has IEmployeeSimple IModelWithLookupSimpleScenario In integer Integer Interfaces into is key Key LINQ LLBLGen LLBLGenPro lookup model Model Models ModelWithLookup ModelWithLookupSimpleScenario moved NET NHibernate object on operations Operations order performing population Pro promote Prototype Read Recipes reference RepoDb represented reuse scenario Scenario ServiceStack snippet table TEmployee that the The This to TODO Tortuga Update with",
      "title": "Integer-Based Foreign Key"
    },
    {
      "location": "ModelWithLookupComplex.htm",
      "breadcrumbs": "Home / Foreign Key to Lookup Table CRUD / Object-Based Foreign Key",
      "keywords": "1 6 a account Ado ADO against all also always an and are aren as As attribute base Based be been by call can cater Chain change child Child children class classes clients code com constructor Core could create Create created CRUD cs Dapper data database Database DB DBContext Decompose default Delete demonstrates derived disabled does doesn e Employee EmployeeComplex EmployeeDetail entities entity Entity EntityFrameworkCore ExecuteQueryMultiple executing exposed fetching FK for foreign Foreign Framework from g get github graph has have here HR https IEmployeeComplex illustrates IModelWithLookupComplexScenario in In indicate indicates Interfaces into is it its join key Key known layer Likewise LINQ LLBLGen LLBLGenPro lookup make mapped mapping Mapping mikependon model Model Models ModelWithLookup ModelWithLookupComplexScenario more moved much multi Multi multiple Multiple must need NET NHibernate not object Object objects occur of on only operations Operations optimal order OrmCookbookDB otherwise outside overload override parameter parent passed performing persisted persists populated population primary Pro promote properties Prototype provides QueryMultiple reachable Read Recipes recursive reference refetch related RepoDb repository represented representing REST Resultsets reuse s safety same saves scenario Scenario second ServiceStack should snippet so solution splitOn sql StackExchange statements support supports sure table taken TEmployee text that the The this This to TODO Tortuga tracking traversing types update Update updated Use used user via view Views was when which wiki with",
      "title": "Object-Based Foreign Key"
    },
    {
      "location": "BasicStoredProc.htm",
      "breadcrumbs": "Home / Basic Stored Procedures",
      "keywords": "2 6 a additional Ado ADO any as basic Basic BasicStoredProc BasicStoredProcScenario be but call can Chain class collection configuration Core CountEmployeesByClassification cover CreateEmployeeClassification cs Dapper Database DB DbContext demonstrate entity Entity EntityFrameworkCore even Framework Future GetEmployeeClassifications HasNoKey how HR IBasicStoredProcScenario if in interpreted is just like LINQ LinqToDB LLBLGen LLBLGenPro modelBuilder Multiple needed NET NHibernate of or OrmCookbookDB other Output parameter Pro procedures Procedures Programability Prototype receive receiver Recipes registered RepoDb requirements results resultset Resultsets return Return returned row rows s scalar Scenario scenarios ServiceStack should single snippet sql stored Stored such TEmployeeClassification TEmployeeClassificationWithCount text that the The These This to To TODO topics Tortuga true two use value values will with",
      "title": "Basic Stored Procedures"
    },
    {
      "location": "Transactions.htm",
      "breadcrumbs": "Home / Working with Transactions",
      "keywords": "1 6 a Ado ADO after against all an and are associated automatically be BeginTransaction behavior call calling can capabilities Chain commands commit connection Core create cs Dapper DataAccessAdapter database DataSource DB defined demonstrate disposed EF Entity EntityFramework EntityFrameworkCore explcitly explicitly extension Framework get holds how in is isolation ITransactionsScenario itself level LINQ LinqToDB LLBLGen LLBLGenPro manages method Microsoft must need NET NHibernate normal object of open operations or original override Pro Prototype provided Recipes RelationalDatabaseFacadeExtensions RepoDb rollback SaveChanges Scenario scenarios ServiceStack setting snippet TEmployeeClassification the The then there These this thus to To TODO Tortuga transaction TransactionalDataSource Transactions TransactionsScenario Unlike use when When While will with Working you",
      "title": "Working with Transactions"
    }
  ]
}