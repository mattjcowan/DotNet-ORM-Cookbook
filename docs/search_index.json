{
  "docs": [
    {
      "location": "ADO.htm",
      "breadcrumbs": "Home / ORMs / ADO.NET",
      "keywords": "a abstract access Ado ADO alert all All allowing allows also and api are area as automatically be beyond blob Bug bugs by capabilities class classes com Common connection Connection connectionstrings connectivity consistent Core creating cs data Data database databases Databases DB Db2 DB2 Devart differently docs documentation Documentation done dotnet drivers en end exact examples experience Firebird FirebirdClient FirebirdSql for For foundational Framework generic github greater have https IBM idatareader IDataReader idbcommand IDbCommand idbconnection IDbConnection implement implements important in includes incorporated indicated Individual information interfaces into is issues itself just known labels libraries Libraries library License LICENSE licensed Licensing logged maintainers master may microsoft Microsoft MIT most Most MySQL MySqlConnector names need needed NET No Npgsql nuget ODBC of Of offer offered often OleDB on OpenConnection OpenEdge or Oracle org otherwise own package packages PostgreSQL PostgreSqlScenarioBase Primary Progress provider providers Recipes Reference reported Reporting repository requires respective runtime Server set setup Setup should snippet special specific SQL SqlClient SQLite SqlServerScenarioBase string strings Strings supported Supported system System than that the The their these This to try Tutorials TXT under Unless us using vary via warning well which writing www you",
      "title": "ADO.NET"
    },
    {
      "location": "Chain.htm",
      "breadcrumbs": "Home / ORMs / Chain",
      "keywords": "a Access ADO also an and any around based be between blob Bug but cached can capabilities Chain classes com concept connection connections connectionString Core created Data database Database Databases DataSource docevaad Documentation files for Framework Full generates generation github handles htm https in internally interrogates intersection Introduction io is issues Issues it its Libraries License Licensing logged mapping Mapping master MDS Microsoft MIT MySql MySQL NET new Normally nuget object Odbc of offered offers often OleDb OleDB one only Only org Other packages per PostgreSql PostgreSQL Primary PrimaryDataSource provider Quick Rather reflection Reflection Reporting repository requires Result safe schema Server set Setup should so specific SQL SqlClient SQLite SqlServer SqlServerDataSource Start string support Support Supported supports System tables than that the Then thread Tortuga Tutorials txt under using Using which without writing www",
      "title": "Chain"
    },
    {
      "location": "Dapper.htm",
      "breadcrumbs": "Home / ORMs / Dapper",
      "keywords": "0 2 a additional ADO alert all an and any apache Apache are as be Bug com Dapper database Database Databases describes Documentation does earilest end examples exposed extension for generation github handle htm http https IDbConnection in indicated is issues Issues it It itself keeping libraries Libraries License LICENSE licenses Licensing logged mapper mapping methods Micro Net NET No not nuget object objects of offered offers often one org ORMs otherwise over packages parameters primary provide provider Provider purpose Quick Reporting repository required requires result same Server set sets setup Setup should simple specific Specific SQL StackExchange Start style Supported supports that the to Tutorials uess under Unless version warning which with writing www",
      "title": "Dapper"
    },
    {
      "location": "EF6.htm",
      "breadcrumbs": "Home / ORMs / Entity Framework 6",
      "keywords": "6 a and are Bug bugs databases Databases Documentation Entity etc for Framework information learning Libraries License Licensing Links List needed NuGet of ORM overview Overview packages project Quick reported Reporting resource setting Setup supported Supported the to TODO TOOD tools Tutorials up Where Which",
      "title": "Entity Framework 6"
    },
    {
      "location": "EFCore.htm",
      "breadcrumbs": "Home / ORMs / Entity Framework Core",
      "keywords": "0 2 3 a access All Alternately and Apache are as assumes automatically Azure be between blob Bug can changes class classes cli com command compatible configuration connections contains core Core Cosmos created creating cross current data database Database Databases DB dbcontext DbContext DBContext describes differently docs Documentation dotnet ef EF efcore en entities entity Entity extensible first for Framework generate get github https in Individual internally is issues Issues itself Libraries License LICENSE licensed Licensing lightweight list logged manages map mapping MariaDB master matching may microsoft miscellaneous MySQL needed netcore not of offered one open Oracle performed platform popular PostgreSQL powershell Primary providers Providers Reporting repository required requires scaffold Scaffold schema See Server Setup should source specific SQL SQLite started subclass Supported supports tables tabs technology the The This to tracks Tutorial Tutorials txt under us used version via which with x",
      "title": "Entity Framework Core"
    },
    {
      "location": "LinqToDB.htm",
      "breadcrumbs": "Home / ORMs / LINQ to DB",
      "keywords": "a and are Bug bugs databases Databases DB Documentation etc for information learning Libraries License Licensing Links LINQ List needed NuGet of ORM overview Overview packages project Quick reported Reporting resource setting Setup supported Supported the to TODO TOOD tools Tutorials up Where Which",
      "title": "LINQ to DB"
    },
    {
      "location": "LLBLGenPro.htm",
      "breadcrumbs": "Home / ORMs / LLBLGen Pro",
      "keywords": "0 1 2 2000 2003 20Framework 20Pro 20Reference 20RTF 20Sql 20to 4 5 6 7 9i a access Access added additional Additionally alert all All also among analyzer and answer API are as aspx assemblies available AvailableDerivedModelFrameworks Azure batching be besides Besides both bug Bug builds buy caching can CE Cloud code com comes commercial compatible complete Core Cosmos data database databases Databases day DB DB2 DBs define derived Derived designer Designer Desktop details development different disconnected document Document documentation Documentation don done DQE DTOs e eager end entities entity Entity EULA Every everything expire expires express Express feature features field Firebird first fixes fluent following for forever form forums framework Framework free from full Functionality g Generated generator get getting_started Google has have higher hotfix htm https IBM if in In info install installed installer interfaces into is it It its Its itself Libraries license licensees Licensing like Linq llblgen LLBLGen loading locally main MariaDB means merged micro Microsoft mix model Model modeling models modern MongoDB more MS much multi multiple MySql MySQL need NET netstandard NHibernate nuget NuGet occasions of offers often on one or Oracle OracleMS OracleODPNET org ORM ORMs ORMSupportClasses outperforming output own packages Pages parts performance perpetual pick plain please PostgreSql PostgreSQL Pro profiler Profiler projections pull queries query questions Quickstart Quickstartguides RavenDB released Reporting reports repository require resultset rich royalty runtime Runtime SD see See Server set Setup several site solution Spanner Sql SQL SqlServer started subscription support Support Supported supports system systems team text the The their them These They this through tinyforum to To top Tutorials two Unit up use used uses using usually v7 valid variants vast version via videos Videos visual was Web website where which with within won work www x you your",
      "title": "LLBLGen Pro"
    },
    {
      "location": "NHibernate.htm",
      "breadcrumbs": "Home / ORMs / NHibernate",
      "keywords": "a and are Bug bugs databases Databases Documentation etc for information learning Libraries License Licensing Links List needed NHibernate NuGet of ORM overview Overview packages project Quick reported Reporting resource setting Setup supported Supported the to TODO TOOD tools Tutorials up Where Which",
      "title": "NHibernate"
    },
    {
      "location": "RepoDb.htm",
      "breadcrumbs": "Home / ORMs / RepoDb",
      "keywords": "0 2 20an 20Issue 23repodb 64px A advance against all also an and any apache Apache are as at automatically basic be being below between blob bootstrapper bridge Bug BulkOperations by call can Chat com common community connection constructed context csharp data database databases Databases developer developers Developers development direct Docs documentation Documentation during en entertain execute Execute executenonquery ExecuteNonQuery executequery ExecuteQuery executequerymultiple ExecuteQueryMultiple executereader ExecuteReader executescalar ExecuteScalar execution filing First fluent for For found freedom fully Fully gaps github GitHub githubusercontent gitter Gitter guidelines has have height helps html http https hybrid im Images img implementations in In Initialize install Install into io is issue Issue issues Issues it It latest Libraries library LICENSE licensed licenses Licensing live macro master md mentioned methods micro mikependon most MySql MySQL MySqlBootstrap NET news nuget of official once only operations org ORM ORMs other Otherwise our over own package Package packages page pages part please pleasse png PostgreSql PostgreSQL PostgreSqlBootstrap practical Practically providers q Q questions raw Raw RDBMS readthedocs ReadTheDocs refer references regards repodb RepoDb Reporting search section see Server Setup simplify some SQL SqLite SQLite SqLiteBootstrap SqlServer SqlServerBootstrap src stackoverflow StackOverflow statements Statements Submit supported Supported switch tab tagged technical that the The their Then These this through title to tree true Tutorials twitter Twitter under use used via we We when which wiki Wiki write www",
      "title": "RepoDb"
    },
    {
      "location": "ServiceStack.htm",
      "breadcrumbs": "Home / ORMs / ServiceStack",
      "keywords": "a and are Bug bugs databases Databases Documentation etc for information learning Libraries License Licensing Links List needed NuGet of ORM overview Overview packages project Quick reported Reporting resource ServiceStack setting Setup supported Supported the to TODO TOOD tools Tutorials up Where Which",
      "title": "ServiceStack"
    },
    {
      "location": "FAQ.htm",
      "breadcrumbs": "Home / FAQ",
      "keywords": "2nd a abide abstract access accomplished achieve add all All allowed an and Another any application Application Architecture are around as Asked assists associated based basic be both business by Can cases close concerns connection connections Connections consider Consumers context conventions cookbook Core create Creating currently custom data database databases DBContext design designing details developer development dictate different Different do doesn don early Edition EmployeeClassification Encapsulate entities example excessive exist expose favorite following for For Frequently fulfill function functionality fundamental general Generally generating goals Guide guidelines have headers hide hold how I if If in In inject intention interact interface interfaces internal IQueryable is ISession It knowledge late layer long maintenance managed managing mapping maximize may mean Microsoft my NET Never no not null objects of once open or order ORM ORMs other our part passed performance periods permitted phase planning possible project queries Questions reason record repositories requirement resources responsible returns scenario scenarios security Separating Server should so solutions something source sources speaking specific SQL structures such support t tasked techniques technologies test that the The them this This through to To TypedDataSets uses using valuable want wants way we What when Why will willing with within XML Yes you",
      "title": "FAQ"
    },
    {
      "location": "SingleModelCrud.htm",
      "breadcrumbs": "Home / Standard CRUD scenarios / Operations on a single entity type",
      "keywords": "1 30 6 a A Action actually Ado ADO adornment alert All amount an and annotations applies are as aspx associate attribute attributes avoid base basic be before below better block boilerplate Build but call called calling calls can cannot cases Chain class classes code Code column Column common complex configuration ConfigureSessionFactory context Contrib convenient core Core could covers create Create CRUD cs csharp Dapper data database DB DbContext DbSet decorated delete Delete Depending derived design directly does doesn done each EDMX ef efcore elimiante eliminates Embedded EmployeeClassification EmployeeClassificationKey EmployeeClassificationName EmployeeClassifications enable end entities Entities entity Entity EntityFramework EntityFrameworkCore entityframeworktutorial essentially every example existing extra extraneous far fetch file files Finally first First Flush for For Framework from further general generate generated get has have hbm helper Here how However HR https illustrates implementations implicitly Improved in In includes info information INSERT Inserted instances Instead int internally invoke is ISingleModelCrudScenario it its itself just key Key keys leaving less library like LINQ LinqToDB literally LLBLGen LLBLGenPro long mapping Mappings match mean means metadata methods minimal model Model models Models modifications more multiple name names need needed needs net NET NHibernate no normally not of offers on one operation operations or OrmCookbook ORMs other Other OUTPUT overridden partial participate per perform performing PostgreSQL primary Pro property Prototype public query Rather raw read Read really Recipes reduce refers RepoDb RepoDB repository represents requires resembles resemebles resource return RETURNING revised row rule rules s same scenario Scenario scenarios see Server ServiceStack SessionFactory set setup Setup shown single Single SingleModelCrud SingleModelCrudPostgreSqlScenario SingleModelCrudScenario SingleModelCrudScenario2 SingleModelCrudScenarioContrib snippet so some speaking specific specified SQL standard statement stitch Strictly string StringLength strings style such systems t table Table tag TEmployeeClassification that the The there There These they this This to To together tooling Tortuga types update Update use used using various version via virtual was ways what when When which will with With Without written www xml XML you",
      "title": "Operations on a single entity type"
    },
    {
      "location": "MultipleCrud.htm",
      "breadcrumbs": "Home / Standard CRUD scenarios / Operations on sets",
      "keywords": "1 100 6 a ADO alert and are as be below better boilerplate can Chain collection common Contrib Core could Create CRUD cs Dapper DB Delete demonstrate done elimiante end Entity EntityFramework EntityFrameworkCore for Framework how If implementations IMultipleCrudScenario info it library LINQ LLBLGen LLBLGenPro methods Multiple MultipleCrud MultipleCrudScenario MultipleCrudScenarioContrib NET NHibernate normally not objects Objects of on operation operations Operations ORM overridden perform performed Pro Prototype Read Recipes RepoDb repository Scenario scenarios ServiceStack should shown single snippet so some SQL statement supports TEmployeeSimple that the The These they This to TODO Tortuga Update virtual was with",
      "title": "Operations on sets"
    },
    {
      "location": "ModelWithChildren.htm",
      "breadcrumbs": "Home / Standard CRUD scenarios / Operations on a graph of multiple entity types",
      "keywords": "1 2 6 a access active ADO agnostic all alone alt Alternately Alternative an and application are aren around as at available based be between block by By can cascade Cascade cascading Chain child Child class clean collection constraint control Core correctly Create CRUD cs Dapper data database DB DBContext default delete Delete DeleteBehavior deleted deletes demonstrates desired direct does due each easy empty ensure entities Entity EntityFrameworkCore EntityState even explicitly find for For foreign Framework functionality go have ignore IModelWithChildrenScenario implemented in includes insert Interfaces IProduct IProductLine is ISession isn it key layer lazy level LINQ list LLBLGen LLBLGenPro loading longer management method missing Model ModelWithChildren ModelWithChildrenScenario ModelWithChildrenScenarioAlt needed Nested NET NHibernate no not object objects of on OnDelete one operating operation operations Operations or order ORM orphan Otherwise parent partial pass performing predicate Pro property Prototype Read Recipes record records Records regular removal removed RepoDb repository requires rest rows scenario Scenario separate separately separation ServiceStack set setting setup snippet stand straightforward support supported table that the The this This to TODO Tortuga TProduct TProductLine tracker tracks transaction trigger two Unit up update Update using utilize utilizing variants way we when When whether which will with With work Work works you",
      "title": "Operations on a graph of multiple entity types"
    },
    {
      "location": "Immutable.htm",
      "breadcrumbs": "Home / Standard CRUD scenarios / Operations on immutable entities",
      "keywords": "1 6 a action ADO after an An and are as be before being Below between but by call can Chain changes class client constructor Constructor conversion conversions cookbook Core Create CRUD cs Dapper data DB default Delete deleted demonstrate directly does doesn e either EmployeeClassification EmployeeClassificationEntity entities entity Entity EntityFramework EntityFrameworkCore fetched focus for Framework g handling have how however IImmutableScenario immutable Immutable ImmutableScenario in indicate individual InferConstructor inserted instead interact Interfaces IReadOnlyEmployeeClassification is it link LINQ LinqToDB LLBLGen LLBLGenPro make manage mapped marked materialized memory models Models mutable natively need needed NET NHibernate no No non not object objects Objects of on only operations Operations option or order other overcome pair perform populate Pro properties Prototype read Read ReadOnlyEmployeeClassification recipes Recipes RepoDb repository sample Scenario scenarios scope ServiceStack setting should side Since snippet special specifications support supports than that the The these These this to To ToEntity Tortuga TReadOnlyModel type Update updated use used using with WithConstructor work working write You",
      "title": "Operations on immutable entities"
    },
    {
      "location": "TryCrud.htm",
      "breadcrumbs": "Home / Standard CRUD scenarios / Handling failures and exceptions",
      "keywords": "1 6 a Ado ADO an and as back between cases catch Chain command Core counts cs Dapper DB Delete demonstrate difference Entity EntityFramework EntityFrameworkCore exception Execute ExecuteNonQuery fail Framework from In is ITryCrudScenario Like LINQ LinqToDB LLBLGen LLBLGenPro methods need NET NHibernate no operations Operations or Pro Prototype read Recipes RepoDb returned row Scenario scenarios ServiceStack silently snippet some StaleStateException TEmployeeClassification that the The there These this to Tortuga trick TryCrud TryCrudScenario TryDelete TryGet TryUpdate Update uses with you",
      "title": "Handling failures and exceptions"
    },
    {
      "location": "ModelWithLookupSimple.htm",
      "breadcrumbs": "Home / Standard CRUD scenarios / Operations with a Foreign Key based Lookup Table / FK Lookup table using an integer-based Foreign Key",
      "keywords": "1 6 a Ado ADO an and as Based been Chain code constructor Core Create CRUD cs Dapper DB Delete demonstrates EmployeeSimple Entity EntityFramework EntityFrameworkCore FK foreign Foreign Framework has IEmployeeSimple IModelWithLookupSimpleScenario In integer Integer Interfaces into is key Key LINQ LLBLGen LLBLGenPro lookup model Model Models ModelWithLookup ModelWithLookupSimpleScenario moved NET NHibernate object on operations Operations order performing population Pro promote Prototype Read Recipes reference RepoDb represented reuse scenario Scenario ServiceStack snippet table TEmployee that the The This to TODO Tortuga Update with",
      "title": "FK Lookup table using an integer-based Foreign Key"
    },
    {
      "location": "ModelWithLookupComplex.htm",
      "breadcrumbs": "Home / Standard CRUD scenarios / Operations with a Foreign Key based Lookup Table / FK Lookup table using an object-based Foreign Key",
      "keywords": "1 6 a account Ado ADO against all also always an and are aren as As attribute base Based be been by call can cater Chain change child Child children class classes clients code com constructor Core could create Create created CRUD cs Dapper data database Database DB DBContext Decompose default Delete demonstrates derived disabled does doesn e Employee EmployeeComplex EmployeeDetail entities entity Entity EntityFrameworkCore ExecuteQueryMultiple executing exposed fetching FK for foreign Foreign Framework from g get github graph has have here HR https IEmployeeComplex illustrates IModelWithLookupComplexScenario in In indicate indicates Interfaces into is it its join key Key known layer Likewise LINQ LLBLGen LLBLGenPro lookup make mapped mapping Mapping mikependon model Model Models ModelWithLookup ModelWithLookupComplexScenario more moved much multi Multi multiple Multiple must need NET NHibernate not object Object objects occur of on only operations Operations optimal order OrmCookbookDB otherwise outside overload override parameter parent passed performing persisted persists populated population primary Pro promote properties Prototype provides QueryMultiple reachable Read Recipes recursive reference refetch related RepoDb repository represented representing REST Resultsets reuse s safety same saves scenario Scenario second ServiceStack should snippet so solution splitOn sql StackExchange statements support supports sure table taken TEmployee text that the The this This to TODO Tortuga tracking traversing types update Update updated Use used user via view Views was when which wiki with",
      "title": "FK Lookup table using an object-based Foreign Key"
    },
    {
      "location": "Joins.htm",
      "breadcrumbs": "Home / Fetching data scenarios / Projecting with a Join",
      "keywords": "2 6 a achieve Additionally Ado ADO an and API as Based be been but by called Chain Child Core created CRUD cs Dapper database DB default define demonstrate design does doesn EF EmployeeDetail EmployeeJoined entity Entity EntityFramework EntityFrameworkCore examples explicitly fallback for For Foreign Framework graph has have hbm Here how htm IJoinsScenario implicit in In into is It join Join joins Joins JoinsScenario JoinsScenarioTypedList Key linq LINQ LinqToDB List Lists LLBLGen LLBLGenPro mapped Mappings may Model ModelWithChildren ModelWithLookupComplex multiple Multiple native natively need NET NHibernate normal not object Object objects of on one Operations or other over performing plain Pro project Projecting projection projections projects Prototype purpose queries raw Recipes Records RepoDb repository reults right same Scenario scenarios See ServiceStack simple snippet so SQL SQLs support supports TEmployeeDetail TEmployeeSimple the these These this time to Tortuga Typed used view which with xml you",
      "title": "Projecting with a Join"
    },
    {
      "location": "Views.htm",
      "breadcrumbs": "Home / Fetching data scenarios / Reading from Views",
      "keywords": "0 2 3 6 a able additional Ado ADO also Alternatively and are aren as be but by capability Chain column configuration configured Core could cs Dapper Database databases DB demonstrate designer EF EmployeeDetail entities entity Entity EntityFramework EntityFrameworkCore false Framework from HasNoKey have hbm how however HR ID in In is IViewsScenario like LINQ LinqToDB LLBLGen LLBLGenPro mapped Mappings marked modelBuilder must mutable name NET NHibernate Note of OrmCookbookDB outside participate POCOs Pro Prototype read Reading readonly Recipes regular relationships RepoDb require requirements scenario Scenario scenarios schema scope ServiceStack snippet some sql Starting supported tables TEmployeeDetail TEmployeeSimple text that the The them these These They this to Tortuga ToView treated two Typed unique view View views Views ViewsScenario we While with writing xml",
      "title": "Reading from Views"
    },
    {
      "location": "RowCount.htm",
      "breadcrumbs": "Home / Fetching data scenarios / Row Counts",
      "keywords": "1 6 a Ado ADO Chain column Core count Counts cs Dapper DB demonstrate discarded else Entity EntityFramework EntityFrameworkCore Everything ExecuteScalar first Framework from get how in In IRowCountScenario is LINQ LinqToDB LLBLGen LLBLGenPro NET NHibernate of Pro Prototype Recipes RepoDb resultset returns row Row RowCount RowCountScenario Scenario scenarios ServiceStack snippet table TEmployeeSimple the These to Tortuga",
      "title": "Row Counts"
    },
    {
      "location": "Pagination.htm",
      "breadcrumbs": "Home / Fetching data scenarios / Paging Results",
      "keywords": "1 6 a Ado ADO an and are available be can Chain com Core cs Dapper DB demonstrate determine e Entity EntityFramework EntityFrameworkCore faster for For Framework how https i If index information IPaginationScenario is keyset Keyset LINQ LinqToDB LLBLGen LLBLGenPro luke more need NET next NHibernate no of offset page Page pagination Pagination PaginationScenario Paging Past point previous Pro Prototype Recipes RepoDb result results Results resutls Scenario scenarios see ServiceStack set shown significantly Size Skip snippet starting styles support Take technique TEmployeeSimple than the These this Three to tool Tortuga use used using We where",
      "title": "Paging Results"
    },
    {
      "location": "PopulateDataTable.htm",
      "breadcrumbs": "Home / Fetching data scenarios / Populate DataTable",
      "keywords": "6 a A add Ado ADO also an are area as be before bulk but can Chain chosen classes columns consider Core creating cs custom Dapper data DataTable DataTableResultTransformer DB displayed does dynamically each EF Entity EntityFramework EntityFrameworkCore ExecuteReader for Framework from generalize grid holding IDataReader in In inconjunction inline insert IPopulateDataTableScenario IResultTransformer is it It library LINQ LLBLGen LLBLGenPro Load may method must natively NET NHibernate not Note object of often onerous operation or performing Populate PopulateDataTable PopulateDataTableScenario PopulateDataTableScenario2 primarily Pro Prototype provided Recipes reflection RepoDb report results returned Scenario ServiceStack snippet some sort SQL staging support supports that the then this to TODO Tortuga used using when with you You",
      "title": "Populate DataTable"
    },
    {
      "location": "ScalarValue.htm",
      "breadcrumbs": "Home / Fetching data scenarios / Reading a Salar Value from a Row",
      "keywords": "6 a Ado ADO an Basic BasicStoredProc Chain column Core count Counts cs Dapper DB demonstrate discarded else Entity EntityFramework EntityFrameworkCore Everything example ExecuteScalar field first For Framework from how htm in In is IScalarValueScenario LINQ LinqToDB LLBLGen LLBLGenPro NET NHibernate of Pro procedure Procedures Prototype read reading Reading Recipes RepoDb resultset returns row Row RowCount scalar Scalar ScalarValue ScalarValueScenario Scenario scenarios see ServiceStack simple single snippet stored Stored the These to TODO Tortuga value Value values",
      "title": "Reading a Salar Value from a Row"
    },
    {
      "location": "SingleColumn.htm",
      "breadcrumbs": "Home / Fetching data scenarios / Reading a Single Column from a Table",
      "keywords": "6 a Ado ADO an Chain column Column Core cs Dapper DB demonstrate discarded else Entity EntityFramework EntityFrameworkCore Everything example ExecuteScalar first For Framework from how htm in In is ISingleColumnScenario LINQ LinqToDB LLBLGen LLBLGenPro NET NHibernate of Pro Prototype read reading Reading Recipes RepoDb resultset returns row Row scalar Scalar Scenario scenarios see ServiceStack single Single SingleColumn SingleColumnScenario snippet table Table the These to TODO Tortuga value Value",
      "title": "Reading a Single Column from a Table"
    },
    {
      "location": "SingleModelCrudAsync.htm",
      "breadcrumbs": "Home / Advanced scenarios / Async Operations",
      "keywords": "1 6 a add adds Ado ADO alert all alternate an and another any appropriate are arrays as As async Async asynchronous attempt await be becomes below between boilerplate but But can cancel cancellable cancellation CancellationToken cases Chain changes CommandDefinition common completing condition ConfigureAwait Contrib Core could create CRUD cs Dapper Data database DB doesn done elimiante end Entity EntityFramework EntityFrameworkCore example exceptions explicitly exposes extension false for For Framework full future general GetByKey GetByKeyAsync handled Here However htm if If implementations import in including info is ISingleModelCrudAsyncScenario it library LINQ LinqToDB LLBLGen LLBLGenPro loading make may methods Model must namespace need needed NET NHibernate non normally not object of only open operation operations or Original Otherwise overridden parameter parameters places Pro Prototype provided query race read reason Recipes record records RepoDb repository required rule safely scenario Scenario scenarios ServiceStack set shown Single SingleModelCrud SingleModelCrudAsync SingleModelCrudAsyncScenario SingleModelCrudAsyncScenarioContrib SingleModelCrudScenario snippet so some support System TEmployeeClassification that the The then There they think this This to To token tokens Tortuga transactions try use user users version virtual was which will wish with With wrap write you your",
      "title": "Async Operations"
    },
    {
      "location": "LargeBatch.htm",
      "breadcrumbs": "Home / Advanced scenarios / Batch Inserts with Large Collections",
      "keywords": "000 1 10 100 2100 6 a adjust ADO after alert and approximately are articles as atomic batch Batch BatchAsLists batches be below better breaking broken Bulk BulkCopyType BulkInsert BulkInsertScenario but can Chain changes collection collections Collections columns command consider Contrib Copy Core could counts CRUD cs Dapper database DB DBContext degration demonstrate doesn done effect end Entity EntityFramework EntityFrameworkCore every explicilty features for For Framework from function github handling how htm html https ILargeBatchScenario implementations in increases info information insert Insert InsertBatch InsertMultipleBatch inserts Inserts instead into io is it Large LargeBatch LargeBatchScenario LargeBatchScenarioContrib library limit LINQ linq2db LinqToDB LLBLGen LLBLGenPro many maximum methods mitigate more Multiple MultipleRows necessary need needed NET new NHibernate No normally not Note number objects Objects of offer on only operations Operations ORMs other overcomes overridden parameter perform performance Pro Prototype provided Recipes removes RepoDb repository require scenario Scenario see Server ServiceStack severe should shown size snippet so Some special sql SQL Start suffer supports T TEmployeeSimple that the The they this This to To Tortuga tracks transaction up use used using Utilities virtual was with",
      "title": "Batch Inserts with Large Collections"
    },
    {
      "location": "BulkInsert.htm",
      "breadcrumbs": "Home / Advanced scenarios / Bulk Inserts",
      "keywords": "000 1 100 6 a ADO and APIs appropriate articles batch Batch be bulk Bulk BulkCopyType BulkInsert BulkInsertScenario Chain collection collections Collections Copy CopyToDataTable Core CRUD cs Dapper database DataTable DB demonstrate described do does Entity for For Framework from function github handled handling have how htm html https IBulkInsertScenario improve in In information insert Insert inserts Inserts io is isn large Large LargeBatch LINQ linq2db LinqToDB LLBLGen mapping more Multiple MultipleCrud NET NHibernate not Note objects Objects of on only operations Operations order ORMs Others pattern perform performance Pro Prototype provided ProviderSpecific rather Recipes RepoDb require same scenario Scenario see seen ServiceStack should size Smaller snippet Some special specific sql SQL support supports TEmployeeSimple than that the this This to Tortuga use used uses Utilities where with",
      "title": "Bulk Inserts"
    },
    {
      "location": "ConnectionSharing.htm",
      "breadcrumbs": "Home / Advanced scenarios / Connection Sharing",
      "keywords": "4 6 a A actively adapter add adjust adjustments ADO alert all always and applicable are around as back be better but by care Chain class closing code collect combining committing connection Connection ConnectionSharing ConnectionSharingScenario controlling Core create cs Dapper DataAccessAdapter DatabaseSpecific DB demonstrate design directly disposing do end Entity EntityFramework EntityFrameworkCore especially exposes Extensions following for Framework have how IConnectionSharingScenario important Important in is isn it LINQ LLBLGen LLBLGenPro managed means multi needs NET NHibernate Not objecsts objects of on or ORMs out owned partial passing Pro Prototype raw realize Recipes RepoDb rolling same scenario Scenario scenarios scope ServiceStack share Sharing simple small snippet some support supported System take TConnection that the The These this This TModel to To TODO Tortuga transaction transactions Transactions TransactionScope TState TTransaction two Unit use very way we when With work Work works you",
      "title": "Connection Sharing"
    },
    {
      "location": "PartialUpdate.htm",
      "breadcrumbs": "Home / Advanced scenarios / Partial Updates",
      "keywords": "1 2 6 a above Ado ADO and are be below can Chain class ClassMappedNameCache Code column columns Core cs Dapper DB decide demonstrate directly do dynamic e either entity Entity EntityFramework EntityFrameworkCore extract fetch fetching filter first following for Framework from g have help how in In IPartialUpdateScenario it item key Limit LINQ LinqToDB LLBLGen LLBLGenPro model modify name NET NHibernate object of on one or original parameter partial Partial PartialUpdate PartialUpdateScenario pass passed perform primary Pro properties Prototype Recipes record RepoDb resembles row s Scenario scenarios separate ServiceStack snippet snippets Specify table targe target targetted the The then These to To Tortuga unpacked update Updated updates Updates UpdateWithObject UpdateWithSeparateParameters will without you your",
      "title": "Partial Updates"
    },
    {
      "location": "Transactions.htm",
      "breadcrumbs": "Home / Advanced scenarios / Transactions",
      "keywords": "1 6 a Ado ADO after against all an and any are associated automatically be BeginTransaction behavior call calling can capabilities Chain commands commit connection Core create cs Dapper DataAccessAdapter database DataSource DB DbConnection DbTransaction defined demonstrate disposed EF Entity EntityFramework EntityFrameworkCore explcitly explicitly extension Framework get holds how in instance is isolation ITransactionsScenario itself level LINQ LinqToDB LLBLGen LLBLGenPro manages method Microsoft must need NET NHibernate normal object of open operations or original override pass Pro Prototype provided Recipes RelationalDatabaseFacadeExtensions RepoDb rollback SaveChanges Scenario scenarios ServiceStack setting Simply snippet TEmployeeClassification the The then there These this thus to To Tortuga transaction TransactionalDataSource Transactions TransactionsScenario Unlike use when When While will with Working you",
      "title": "Transactions"
    },
    {
      "location": "Upsert.htm",
      "breadcrumbs": "Home / Advanced scenarios / Upsert",
      "keywords": "1 6 a Ado ADO an atomic be Chain code Core cs Dapper DB demonstrate demonstrates directly doesn EF Entity EntityFramework EntityFrameworkCore Framework how in insert IUpsertScenario LINQ LinqToDB LLBLGen LLBLGenPro MERGE must NET NHibernate often perform performed possible Pro proceed Prototype read Recipes RepoDb Scenario scenarios ServiceStack should single snippet so statement support syntax TDivision the These this This to Tortuga update upsert Upsert UpsertScenario Where",
      "title": "Upsert"
    },
    {
      "location": "Sorting.htm",
      "breadcrumbs": "Home / Sorting scenarios / Basic Sorting",
      "keywords": "1 6 a A Ado ADO against are as at attacks basic Basic be but by Chain checked chosen columns Columns Core cs Dapper DB demonstrate dynamically DynamicSorting Entity EntityFramework EntityFrameworkCore expressions for Framework handled how in injection is ISortingScenario LINQ LinqToDB list LLBLGen LLBLGenPro needed NET NHibernate Note object of or passed perform prevent Pro Prototype Recipes RepoDb reverse runtime Scenario scenarios separate ServiceStack snippet SortByFirstName SortByMiddleNameDescFirstName SortByMiddleNameFirstName sorted SortExpression sorting Sorting SortingScenario sorts SQL strings TEmployeeSimple the These to Tortuga will",
      "title": "Basic Sorting"
    },
    {
      "location": "DynamicSorting.htm",
      "breadcrumbs": "Home / Sorting scenarios / Sorting by Dynamically Chosen Columns",
      "keywords": "1 6 a A acomplished Ado ADO against allowed alternative and API are as at attacks attempt Basic be being below bit but by can Chain checked checking Chosen code collection column columns Columns Core cs dangerous Dapper DB defined demonstrate detect directly does don Dynamically DynamicSorting DynamicSortingExtensions DynamicSortingScenario EF Entity EntityFramework examples expressions extensions first fixed for For Framework how However htm IDynamicSortingScenario illustrated in injection instances IQueryable is it level LINQ LinqToDB list little LLBLGen LLBLGenPro low method name names natively needed NET NHibernate not object objects of older OrderField ORMs parameter passed perform potentially prevent Pro Prototype provided Recipes RepoDb requires reverse runtime Scenario scenarios second See ServiceStack shows snippet some sort SortBy sorted SortExpression sorting Sorting sorts SQL statically string strings support TEmployeeSimple that the The these These They this This to Tortuga use using Utilities validation verbose versions where will with",
      "title": "Sorting by Dynamically Chosen Columns"
    },
    {
      "location": "BasicStoredProc.htm",
      "breadcrumbs": "Home / Stored procedure scenarios / Basic Stored Procedures",
      "keywords": "2 6 a Ado ADO as basic Basic BasicStoredProc BasicStoredProcScenario be below call can Chain class collection Core CountEmployeesByClassification cover CreateEmployeeClassification cs Dapper Database DB DbContext demonstrate EmployeeClassificationKeyHolder EmployeeClassificationWithCount Entities Entity EntityFrameworkCore even Framework Future GetEmployeeClassifications how HR IBasicStoredProcScenario if in interpreted is LINQ LinqToDB LLBLGen LLBLGenPro Multiple needed NET NHibernate of or OrmCookbookContext OrmCookbookDB Output parameter Pro procedures Procedures Programability Prototype receive receiver Recipes registered RepoDb results resultset Resultsets return Return returned row rows s scalar Scenario scenarios ServiceStack should shown single snippet sql stored Stored such TEmployeeClassification TEmployeeClassificationWithCount text that the The These This to To TODO topics Tortuga true use value values will",
      "title": "Basic Stored Procedures"
    },
    {
      "location": "AuditColumns.htm",
      "breadcrumbs": "Home / Auditing and history scenarios / Audit Columns",
      "keywords": "1 20code 20generated 20Pro 20RTF 20the 5 6 a about act actions actual Ado ADO alert along also altering an and are as Assembly AssemblyInit at audit Audit AuditColumns AuditColumnsScenario audited auditing Auditing auditor Auditor auditors be being below built by can Chain class classes code column columns Columns com configured Core create created CreatedBy CreatedDate cs Dapper data dataSource DataSource DB demonstrate DepartmentAuditor DepartmentEntity Dependency design designed developer directly docs Documentation does done e each EF end ensure entities Entities entity Entity EntityFramework EntityFrameworkCore every existing following for For Framework from further g gencode_auditing generalize generated hand has here how however htm https IAuditableEntity IAuditColumnsScenario in info information Injectables injected Injection inserted instance instances intentionally interface into is it level like LINQ list List llblgen LLBLGen LLBLGenPro mainly management manually merged method NET new NHibernate not null object of official on ones operation or OrmCookbookContextWithUser overide parameters passed pattern persisted PK populated prevent Pro Prototype provide provided Recipes recorders RepoDb requires runtime RuntimeConfiguration same SaveChanges scenario Scenario scenarios separated separately ServiceStack SetDependencyInjectionInfo setting setup shown simplicity snippet someone store supplied supply system TDepartment that the The then Then These this This ThreadPrinciple through to To TODO Tortuga transaction typeof updated usable use used user User Using usually Usually values various warning when which will with WithUser works www",
      "title": "Audit Columns"
    },
    {
      "location": "SoftDelete.htm",
      "breadcrumbs": "Home / Auditing and history scenarios / Soft Delete",
      "keywords": "1 229 6 a add ADO alert also alternate an at be Chain column columns com configured Cookbook Core create cs Dapper DataSource DB delete Delete deleted deletes demonstrate design DotNet e each EF end Entities entity Entity EntityFramework EntityFrameworkCore filter flag for For Framework generalize github Grauenwolf hard HasQueryFilter how https i implementations in including interface is IsDeleted ISoftDeletable ISoftDeleteScenario issues level LINQ LLBLGen manually method ModelBuilder need NET NHibernate objects only OnModelCreating operations ORM OrmCookbookContextWithSoftDelete out overide partial pattern Pro Prototype provide rather Recipes related RepoDb requires rows s SaveChanges Scenario scenarios See select ServiceStack snippet soft Soft SoftDelete SoftDeleteScenario solution support supported TDepartment than that the Then These This those to To TODO Tortuga use values warning When with you",
      "title": "Soft Delete"
    }
  ]
}